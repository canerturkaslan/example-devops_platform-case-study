pipeline {

  options {
    ansiColor('xterm')
  }

  agent {
    kubernetes {
      yamlFile './app/builder.yaml'
    }
  }
  
  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }
    
    stage('Build and Push') {
    when { expression { return params.runBuild } }
    steps {
      container(name: 'kaniko') {
        // Kaniko ile Docker imajını build ve push işlemi
        script {
          sh '''

          /kaniko/executor --dockerfile `pwd`/app/Dockerfile \
                           --context `pwd`/app \
                           --destination=canerturkaslan/flask-app:0.${BUILD_NUMBER}
          '''
        }
      }
    }
  }    
 

    stage('Deploy App to Kubernetes') {     
      steps {
        container('kubectl') {
          withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
            sh 'ls -ltrah && pwd'
            sh 'sed -i "s/<IMAGE_TAG>/${BUILD_NUMBER}/" ./app/manifests/deployment.yaml'
            sh 'kubectl apply -f ./app/manifests/deployment.yaml -n default' 
            sh 'kubectl apply -f ./app/manifests/service.yaml -n default'
            sh 'kubectl apply -f ./app/manifests/hpa.yaml -n default'
            sh 'kubectl apply -f ./app/manifests/ingress.yaml -n default'
            sh 'kubectl apply --recursive -f ./app/manifests/ -n default'            

          }
        }
      }
    }
    

  }
}

